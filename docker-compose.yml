version: '3.8'

services:
  mongo:
    image: mongo
    container_name: mongodb
    hostname: host-mongo
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./data:/data/db
      - ./data/log:/var/log/mongodb/
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: qwerty
    networks:
      - gateway
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - kafka  

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_DELETE_RETENTION_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_IRS: 1
      KAFKA_TRANSACTION_STATE_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    networks:
      - kafka 

  gateway:
    build: ./Gateway_CDS
    container_name: gateway
    restart: always
    ports:
      - "8081:8081"
    volumes:
      - ./Gateway_CDS:/app
    depends_on:
      - mongo
      - eureka  
    networks:
      - gateway

  eureka:
    build: ./Eureka_CDS
    container_name: eureka
    ports:
      - "8761:8761"
    volumes:
      - ./Eureka_CDS:/app
    networks:
      - gateway

  login:
    build: ./Login
    container_name: login
    restart: always
    ports:
      - "4000:4000"
    volumes:
      - ./Login:/app
    depends_on:
      - mongo
      - eureka
    networks:
      - gateway

  injector:
    build: ./Injector    
    container_name: injector
    depends_on:
      - kafka
      - zookeeper
    networks:
      - kafka

  consumidor:
    build: ./Consumidor    
    container_name: consumidor
    depends_on:
      - mongo
      - kafka
      - zookeeper
      - consumidor-base
    networks:
      - kafka

  consumidor-base:
    build: ./Consumidor_Base
    container_name: consumidor-base
    restart: always
    ports:
      - "4002:4002"
    depends_on:
      - mongo
      - kafka
      - zookeeper
    networks:
      - kafka

  front-next:
    build: ./front-next
    container_name: front-next
    restart: always
    volumes:
      - ./front-next:/app
    ports:
      - "3000:3000"
    networks:
      - gateway
    depends_on:
      - mongo


  datos:
    build: ./Datos
    container_name: datos
    restart: always
    volumes:
      - ./datos:/app
    ports:
      - "5000:5000"
    networks:
      - gateway
    depends_on:
      - mongo

volumes:
  data:

networks:
  gateway:
  kafka: